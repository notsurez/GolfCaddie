

<launch>
	
	<!-- Rosserial python node to communicate with arduino -->
	<node pkg="rosserial_python" type="serial_node.py" name="serial_node1" respawn="true" output="screen">
		<param name="port" value="/dev/ttyACM0"/>
	</node>

	<!-- Start necessary python scripts -->
	<node pkg="golf_caddie" type="talker.py" name="talker1"/>
	
	<!-- Arguments for the kinect2_bridge -->
	<arg name="base_name"         default="kinect2"/>
	<arg name="sensor"            default=""/>
	<arg name="publish_tf"        default="false"/>
	<arg name="base_name_tf"      default="$(arg base_name)"/>
	<arg name="fps_limit"         default="-1.0"/>
	<arg name="calib_path"        default="$(find kinect2_bridge)/data/"/>
	<arg name="use_png"           default="false"/>
	<arg name="jpeg_quality"      default="90"/>
	<arg name="png_level"         default="1"/>
	<arg name="depth_method"      default="default"/>
	<arg name="depth_device"      default="-1"/>
	<arg name="reg_method"        default="default"/>
	<arg name="reg_device"        default="-1"/>
	<arg name="max_depth"         default="12.0"/>
	<arg name="min_depth"         default="0.1"/>
	<arg name="queue_size"        default="5"/>
	<arg name="bilateral_filter"  default="true"/>
	<arg name="edge_aware_filter" default="true"/>
	<arg name="worker_threads"    default="4"/>
	<arg name="machine"           default="localhost"/>
	<arg name="nodelet_manager"   default="$(arg base_name)"/>
	<arg name="start_manager"     default="true"/>
	<arg name="use_machine"       default="true"/>
	<arg name="respawn"           default="true"/>
	<arg name="use_nodelet"       default="true"/>
	<arg name="output"            default="screen"/>

  <machine name="localhost" address="localhost" if="$(arg use_machine)"/>


	<!-- Node version of kinect2_bridge -->
	<node pkg="kinect2_bridge" type="kinect2_bridge" name="$(arg base_name)_bridge" machine="$(arg machine)"
	respawn="$(arg respawn)" output="$(arg output)" unless="$(arg use_nodelet)">
		<param name="base_name"         type="str"    value="$(arg base_name)"/>
		<param name="sensor"            type="str"    value="$(arg sensor)"/>
		<param name="publish_tf"        type="bool"   value="$(arg publish_tf)"/>
		<param name="base_name_tf"      type="str"    value="$(arg base_name_tf)"/>
		<param name="fps_limit"         type="double" value="$(arg fps_limit)"/>
		<param name="calib_path"        type="str"    value="$(arg calib_path)"/>
		<param name="use_png"           type="bool"   value="$(arg use_png)"/>
		<param name="jpeg_quality"      type="int"    value="$(arg jpeg_quality)"/>
		<param name="png_level"         type="int"    value="$(arg png_level)"/>
		<param name="depth_method"      type="str"    value="$(arg depth_method)"/>
		<param name="depth_device"      type="int"    value="$(arg depth_device)"/>
		<param name="reg_method"        type="str"    value="$(arg reg_method)"/>
		<param name="reg_device"        type="int"    value="$(arg reg_device)"/>
		<param name="max_depth"         type="double" value="$(arg max_depth)"/>
		<param name="min_depth"         type="double" value="$(arg min_depth)"/>
		<param name="queue_size"        type="int"    value="$(arg queue_size)"/>
		<param name="bilateral_filter"  type="bool"   value="$(arg bilateral_filter)"/>
		<param name="edge_aware_filter" type="bool"   value="$(arg edge_aware_filter)"/>
		<param name="worker_threads"    type="int"    value="$(arg worker_threads)"/>
	</node>
	
	<!-- sd point cloud (512 x 424) -->
	<node pkg="nodelet" type="nodelet" name="$(arg base_name)_points_xyzrgb_sd" machine="$(arg machine)"
        args="load depth_image_proc/point_cloud_xyzrgb $(arg nodelet_manager)" respawn="$(arg respawn)">
		<remap from="rgb/camera_info"             to="$(arg base_name)/sd/camera_info"/>
		<remap from="rgb/image_rect_color"        to="$(arg base_name)/sd/image_color_rect"/>
		<remap from="depth_registered/image_rect" to="$(arg base_name)/sd/image_depth_rect"/>
		<remap from="depth_registered/points"     to="$(arg base_name)/sd/points"/>
		<param name="queue_size" type="int" value="$(arg queue_size)"/>
	</node>
	
	<!-- Depth Image to Laser Scan Node -->
	
	<node name="depthimage_to_laserscan" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" args="">
		<remap from="image"       to="/camera/aligned_depth_to_color/image_raw"/> <!-- change here for your camera depth topic name. Default: "/camera/depth/image_raw" -->

		<remap from="camera_info" to="/camera/color/camera_info"/> 
		<!-- the remap for camera_info by default uses the same path as the one given to the image topic. Default: "<path_to_image_topic>/camera_info>" -->

		<!-- PARAMETERS: -->
		<!-- These are the default values. --> 
		<param name="scan_height"     type="int"    value="1"/> <!-- default: 1 pixel. Number of pixel rows used to generate laser scan. -->
		<param name="scan_time"       type="double" value="0.033"/> <!-- default:0.033, 30 FPS . Time between scans. -->
		<param name="range_min"       type="double" value="0.45"/> <!--default:0.45m. Ranges less than this are considered -Inf. -->
		<param name="range_max"       type="double" value="10.0"/> <!--default: 10m. Ranges less than this are considered +Inf. -->
		<param name="output_frame_id" type="str"    value="camera_depth_frame"/> <!--default: camera_depth_frame. Frame id of the laser scan. -->
	</node>
	
	<!-- Inertial Measurement Unit (IMU) -->
	<include file="$(find imu_ros_bno055)/launch/imu.launch">

	<arg name = "serial_port" value="/dev/ttyUSB0" />
	<arg name = "frame_id" value="imu_link" />
	<arg name = "operation_mode" value="IMU"/>
	<arg name = "oscillator" value="INTERNAL" />
	<arg name = "reset_orientation" value="true" />
	<arg name = "frequency" value="50" /> 
	<arg name = "use_magnetometer" value="false" />
	<arg name = "use_temperature" value="false" />
	
</launch>
